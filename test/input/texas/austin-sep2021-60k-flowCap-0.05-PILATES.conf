include "austin-sep2021-base.conf"

beam.agentsim.simulationName = "austin-sep2021-60k-flowCap-0.05"

# full plans has 1506680 persons
# 300k  -> ~0.2
# 60k   -> ~0.04
beam.agentsim.agentSampleSizeAsFractionOfPopulation = 0.04

# most of the time we need a single iteration
beam.agentsim.firstIteration = 0
beam.agentsim.lastIteration = 0

beam.physsim.flowCapacityFactor = 0.05

beam.exchange{
  output {
    # this enables saving activitySim Skims
    activitySimSkimsEnabled = true
    # geo level different than TAZ (in beam taz-centers format)
    geo.filePath = ${beam.inputDirectory}"/blockgroup-centers.csv.gz"
  }
  scenario {
    # source for now can be "MATSim" or "UrbanSim"
    source = "urbansim_v2"
    # Input file format for scenario loader can be "csv" or "parquet"
    fileFormat = "csv"
    folder = ${beam.inputDirectory}"/urbansim_v2_sep_2021"
    convertWgs2Utm = true
    modeMap = [
      "BIKE           -> bike",
      "DRIVEALONEFREE -> car",
      "DRIVEALONEPAY  -> car",
      "DRIVE_COM      -> drive_transit",
      "DRIVE_EXP      -> drive_transit",
      "DRIVE_HVY      -> drive_transit",
      "DRIVE_LOC      -> drive_transit",
      "DRIVE_LRF      -> drive_transit",
      "SHARED2FREE    -> hov2",
      "SHARED2PAY     -> hov2",
      "SHARED3FREE    -> hov3",
      "SHARED3PAY     -> hov3",
      "TAXI           -> ride_hail",
      "TNC_SHARED     -> ride_hail",
      "TNC_SINGLE     -> ride_hail",
      "WALK           -> walk",
      "WALK_COM       -> walk_transit",
      "WALK_EXP       -> walk_transit",
      "WALK_HVY       -> walk_transit",
      "WALK_LOC       -> walk_transit",
      "WALK_LRF       -> walk_transit",
    ]
  }
}

beam.router.skim = {
  # This allows to write skims on each iteration
  writeSkimsInterval = 1
}

# This loads linkStats from the last found BEAM runs
beam.warmStart.type = "linkStatsFromLastRun"

# For subsequential beam runs (some data will be laoded from the latest found run in this directory)
beam.input.lastBaseOutputDir = ${beam.outputs.baseOutputDirectory}
# This prefix is used to find the last run output directory within beam.input.lastBaseOutputDir direcotry
beam.input.simulationPrefix = ${beam.agentsim.simulationName}

# fraction of input plans to be merged into the latest output plans (taken from the beam.input.lastBaseOutputDir)
beam.agentsim.agents.plans.merge.fraction = 0.2
